<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimeUnit</name>
    </assembly>
    <members>
        <member name="T:SlugEnt.TimeUnitTypes">
            <summary>
            Used to represent all valid TimeUnitTypes for the TimeUnit class.
            </summary>
        </member>
        <member name="T:SlugEnt.TimeUnit">
            <summary>
            Represents a unit of time that is sometimes used to provide a more friendly human readable format.  The unit of time is represented as a string in the format
            [amount of units][unit value].  Where:
              [amount of units] is a whole number representing how many of the units this time represents.
              [TimeUnitType] is a single character which represents the unit value.  Valid values are:
                 s - Seconds
                 m - Minutes
                 h - Hours
                 d - Days
                 w - Weeks
                 
                 Larger Unit Types are not allowed as they become invalid due to calendar variations (not all months are 30 days for instance, or leap year). 
                 
            Two TimeUnits are considered to be equal if their base amount of time (seconds) is the same.  So a TimeUnit of 120s and 2m would be considered equal.  This applies
            to both the == and Equals comparison operators.
            Common Functions are:  
               - Value
               - ValueAsNumeric
               - ToString
               - ValueAsWholeNumber
               
            </summary>
            <example>6m - 6 minutes</example>
            <example>14h - 14 hours</example>
            <example>104d - 104 days</example>
        </member>
        <member name="F:SlugEnt.TimeUnit._seconds">
            <summary>
            We store the base unit in seconds.  We use a double because the TimeSpan conversion functions all require doubles, so this avoids lots of casting to double.
            </summary>
        </member>
        <member name="F:SlugEnt.TimeUnit._unitType">
            <summary>
            The TimeUnitType that this represents.
            </summary>
        </member>
        <member name="M:SlugEnt.TimeUnit.#ctor(System.Int64)">
            <summary>
            Takes a number of seconds and turns it into a TimeUnit value stored as seconds.  Seconds will be the preferred UnitType display.
            </summary>
            <param name="seconds">The number of seconds the TimeUnit represents</param>
        </member>
        <member name="M:SlugEnt.TimeUnit.#ctor(System.String)">
            <summary>
            Creates a TimeUnit object from the specified TimeUnit string value (ie. 7m or 3h).  Note, the numeric part of the TimeUnit value must be an integer number.  The suffix will define the preferred UnitType display of the object.
            </summary>
            <param name="timeValue"></param>
        </member>
        <member name="M:SlugEnt.TimeUnit.ToString">
            <summary>
            Prints out the the TimeUnit in long text.  Example: 6 Minutes.
            </summary>
            <returns>String representing the long textual value.</returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.Value">
            <summary>
            Returns the TimeUnit "native" value.  Example:  6m
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.ValueAsWholeNumber">
            <summary>
            Returns the largest TimeUnit Value that is a whole number.  For instance 59m would return 59m.  60m would return 1h.  24h would return 1d.
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.ValueAsNumeric">
            <summary>
            Returns the numeric value of this TimeUnit.  If upon creation you specified a value of 9m (9 minutes) this function will return 9.
            </summary>
        </member>
        <member name="M:SlugEnt.TimeUnit.ValidateUnitTypeCharacter(System.Char)">
            <summary>
            Validates that the timeIncrement character passed in is a valid TimeUnit type.
            </summary>
            <param name="timeIncrement">Char that should be inspected for a valid TimeUnit Type.</param>
            <returns>True if valid timeIncrement character code.  False otherwise.</returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.InSecondsAsDouble">
            <summary>
            Returns the number of seconds this TimeUnit represents in Double format.
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InSecondsAsString">
            <summary>
            Returns the TimeUnit value as a double seconds string. IE.  125s
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InSecondsLong">
            <summary>
            Returns the TimeUnit in seconds format, but as a long value.
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InMinutesAsDouble">
            <summary>
            Returns the number of seconds this TimeUnit represents.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.InMinutesAsString">
            <summary>
             Returns the TimeUnit in minutes as a string (ie. 6m)
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InHoursAsDouble">
            <summary>
            Returns the number of seconds this TimeUnit represents.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.InHoursAsString">
            <summary>
            Returns the number of hours this timeunit represents as a string.  Ex.  29h
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InDaysAsDouble">
            <summary>
            Returns the number of days this TimeUnit represents as a double.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.InDaysAsString">
            <summary>
            Returns the number of days in string format.  Ex.  16d
            </summary>
        </member>
        <member name="P:SlugEnt.TimeUnit.InWeeksAsDouble">
            <summary>
            Returns the number of weeks this TimeUnit represents in double form.  Ex.  6.44
            </summary>
            <returns></returns>
        </member>
        <member name="P:SlugEnt.TimeUnit.InWeeksAsString">
            <summary>
            Returns the number of weeks this TimeUnit represents in string form:  6.4w
            </summary>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.GetUnitTypeAbbrev">
            <summary>
            Returns the proper Unit Type abbreviation (single letter) of the Current TimeUnit value.
            </summary>
            <returns>String with single character representing the Unit Type.</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.GetUnits(SlugEnt.TimeUnitTypes)">
            <summary>
            Gets the number of units of the Unit Type.  Basically, just converts the internally stored seconds into proper unit value.
            </summary>
            <returns>long - The number of units of the given UnitType</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.GetTimeUnitTypeAsString(SlugEnt.TimeUnitTypes)">
            <summary>
            Returns the appropriate character representation for the TimeUnitTypes Enum value.  For example if TimeUnitTypes.Seconds returns 's'.
            </summary>
            <param name="timeUnitType">The TimeUnitType enum value to retrieve the character or string representation for.</param>
            <returns>string value of the TimeUnitType</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.GetHighestWholeNumberUnitType(System.Int64)">
            <summary>
            Returns the TimeUnit in a value that represents the largest unit value that results in a whole number.  For instance - 360 seconds would return 6m.  359 seconds would return 359 seconds.
            </summary>
        </member>
        <member name="M:SlugEnt.TimeUnit.op_Addition(SlugEnt.TimeUnit,SlugEnt.TimeUnit)">
            <summary>
            Adds 2 TimeUnit types together to arrive at a 3rd TimeUnit object.  Will set the TimeUnit Type property to the largest WholeNumber value it can determine.  
            So, if a TimeUnit of 60s is added to a TimeUnit of 59m, will result in a TimeUnit of 1h.
            </summary>
            <param name="a">1st TimeUnit object</param>
            <param name="b">2nd TimeUnit object</param>
            <returns>Result of adding the 2 TimeUnits together.</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.op_Subtraction(SlugEnt.TimeUnit,SlugEnt.TimeUnit)">
            <summary>
            Subtracts 2 TimeUnit types to arrive at a 3rd TimeUnit object.  Will set the TimeUnit Type property to the largest WholeNumber value it can determine.  
            So, if a TimeUnit of 60s is added to a TimeUnit of 59m, will result in a TimeUnit of 1h.  
            If the 2nd TimeUnit is larger than the first TimeUnit the result will be zero.
            </summary>
            <param name="a">1st TimeUnit object</param>
            <param name="b">2nd TimeUnit object</param>
            <returns>Result of subtracting TimeUnit b from TimeUnit a.  Negative values all result in a value of 0s.</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.AddToDate(System.DateTime)">
            <summary>
            Adds the Current TimeUnit value to the date provided and returns a new DateTime object.
            </summary>
            <param name="dateTime">DateTime object to be used as the starting date and time.</param>
            <returns>Datetime object with the current TimeUnit value added to the datetime provided.</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.SubtractFromDate(System.DateTime)">
            <summary>
            Subtracts the Current TimeUnit value from the date provided and returns a new DateTime object.
            </summary>
            <param name="dateTime">DateTime object to be used as the starting date and time.</param>
            <returns>Datetime object with the current TimeUnit subtracted from the datetime provided.</returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.AddSeconds(System.Int64)">
            <summary>
            Add the given number of seconds to the TimeUnit
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.AddMinutes(System.Int64)">
            <summary>
            Add the given number of minutes to the TimeUnit
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.AddHours(System.Int64)">
            <summary>
            Add the given number of hours to the TimeUnit
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.AddDays(System.Int64)">
            <summary>
            Add the given number of Days to the TimeUnit
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.SubtractSeconds(System.Int64)">
            <summary>
            Subtract the number of seconds to the TimeUnit
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.SubtractMinutes(System.Int64)">
            <summary>
            Subtract the number of minutes to the TimeUnit
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.SubtractHours(System.Int64)">
            <summary>
            Subtract the number of hours to the TimeUnit
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.SubtractDays(System.Int64)">
            <summary>
            Subtract the given number of days from the TimeUnit
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.Equals(SlugEnt.TimeUnit)">
            <summary>
            For IEquatable Interface
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SlugEnt.TimeUnit.CompareTo(SlugEnt.TimeUnit)">
            <summary>
            Used for IComparable Interface
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
    </members>
</doc>
